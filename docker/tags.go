package docker

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"sort"

	"golang.org/x/mod/semver"
)

// Generated by https://quicktype.io

type TagResponse struct {
	Count    int64       `json:"count"`
	Next     interface{} `json:"next"`
	Previous interface{} `json:"previous"`
	Tags     []Tag       `json:"results"`
}

type Tag struct {
	Name   string `json:"name"`
	Semver string `json:"semver"`
}

func ResolveTag(organization string, image string, tag string) (string, error) {
	if (tag == "latest") || (tag == "") {
		latestTag, err := GetLatestTag(organization, image)
		if err != nil {
			return "", err
		}

		return latestTag, nil
	}

	return tag, nil
}

func GetLatestTag(organization string, imageName string) (string, error) {
	// get available tags from docker hub
	tags, err := GetTagsFromDocker(organization, imageName)
	if err != nil {
		return "", err
	}

	// get only semver tags
	semverTags := []Tag{}
	for _, tag := range tags {
		if semver.IsValid(tag.Semver) {
			semverTags = append(semverTags, tag)
		}
	}

	if len(semverTags) == 0 {
		return "latest", nil
	}

	return semverTags[0].Name, nil
}

func GetTagsFromDocker(organization string, image string) ([]Tag, error) {
	client := &http.Client{}
	req, newReqErr := http.NewRequest("GET", fmt.Sprintf("https://registry.hub.docker.com/v2/repositories/%s/%s/tags?page_size=1024", organization, image), nil)

	if newReqErr != nil {
		return nil, newReqErr
	}

	parseFormErr := req.ParseForm()
	if parseFormErr != nil {
		return nil, parseFormErr
	}

	// Fetch Request
	resp, err := client.Do(req)

	if err != nil {
		return nil, err
	}

	// Read Response Body
	respBody, _ := ioutil.ReadAll(resp.Body)

	// parse response body as json
	var tagResponse TagResponse
	err = json.Unmarshal(respBody, &tagResponse)
	if err != nil {
		return nil, err
	}

	return orderTags(tagResponse.Tags), nil
}

func orderTags(tags []Tag) []Tag {
	// split tags into numeric and non-numeric
	numericTags := []Tag{}
	nonNumericTags := []Tag{}
	for _, tag := range tags {
		name := tag.Name
		if name[0] != 'v' {
			name = "v" + name
		}

		if semver.IsValid(name) {
			tag.Semver = name
			numericTags = append(numericTags, tag)
		} else {
			nonNumericTags = append(nonNumericTags, tag)
		}
	}

	// sort semver tags
	sort.Slice(numericTags, func(i, j int) bool {
		return semver.Compare(numericTags[i].Semver, numericTags[j].Semver) > 0
	})

	// sort non-semver tags ensuring latest is first
	sort.Slice(nonNumericTags, func(i, j int) bool {
		if nonNumericTags[i].Name == "latest" {
			return true
		}

		return nonNumericTags[i].Name < nonNumericTags[j].Name
	})

	return append(nonNumericTags, numericTags...)
}
